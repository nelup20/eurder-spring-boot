{"version":3,"sources":["App.js","index.js"],"names":["App","EMAIL_REGEX","state","section1","inputs","firstName","lastName","emailAddress","address","phoneNumber","isEmailValid","highlightInputIfEmpty","section","inputName","length","displayHelperMessageIfInputEmpty","createCustomer","console","log","handleInputChange","event","target","name","inputValue","value","oldState","test","setState","className","src","id","color","subtitle","size","Body","type","this","onChange","placeholder","onClick","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7bde43a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"react-bulma-components/dist/react-bulma-components.min.css\";\nimport {Hero, Section, Heading, Input, Control, Field, Label} from \"react-bulma-components\";\nimport './App.css';\n\nclass App extends React.Component{\n  EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\n  \n  state = {\n    section1: {\n        inputs: {\n          firstName: \"Tom\",\n          lastName: \"Doe\",\n          emailAddress: \"tom@tom.com\",\n          address: \"Tom doe street 22\",\n          phoneNumber: \"012345678\"\n        },\n        isEmailValid: true\n    }\n  }\n\n  highlightInputIfEmpty = (section, inputName) => {\n    return this.state[section].inputs[inputName].length !== 0 ? \" is-success\" : \" is-danger\";\n  }\n\n  displayHelperMessageIfInputEmpty = (section, inputName) => {\n    return this.state[section].inputs[inputName].length !== 0 ? \" is-hidden\" : \" is-danger\";\n  }\n\n  createCustomer = () => {\n    console.log(\"I got clicked!\");\n  }\n\n  handleInputChange = (event) => {\n    let inputName = event.target.name;\n    let inputValue = event.target.value;\n    let oldState = this.state;\n\n    if(inputName === \"emailAddress\"){\n      oldState.section1.isEmailValid = this.EMAIL_REGEX.test(inputValue);\n    }\n\n    oldState.section1.inputs[inputName] = inputValue;\n\n    this.setState(oldState);\n  }\n\n  render(){\n    return(\n      <div className=\"container\">\n        <img src=\"order-logo.png\" id=\"order-logo\"/>\n        <Section>\n        <Hero color=\"primary\" id=\"aboutHero\">\n            <Heading className=\"heroHeading\">What is this web app for?</Heading>\n            <Heading className=\"heroHeading\" subtitle size={4}>This web app was made as a small project in order to practice creating backends with Spring Boot. The purpose of this extremely-minimal frontend made in React (w/ Bulma) is to allow others to easily test the API/endpoints without having to create requests using various tools such as Postman. Below you'll see sections divided by the specific endpoint, with a small description of what the requirements are to create a successful request, as well as what will be expected as a result. <br/><br/> Most inputs will be pre-filled with the correct data necessary to make a successful request. You can of course modify the input to see what the result will be. If you're not sure what data to use, you can always go and copy-paste the data from the block below which contains the initial data that is loaded when the app starts and will therefore always result in a successful request.</Heading>\n        </Hero>\n        </Section>\n\n        <Section>\n        <Heading>Initial data</Heading>\n        <Hero className=\"has-background-grey-lighter\" id=\"initialDataHero\">\n          <Hero.Body className=\"is-size-5\">\n            <div><span className=\"has-text-weight-bold\">Admin ID:</span> de6def71-53ca-4e5e-85ef-9ed3ab598391</div>\n            <div><span className=\"has-text-weight-bold\">Customer ID:</span> c6093628-b11a-4ece-b2f0-509fc0f3c132</div>\n            <div><span className=\"has-text-weight-bold\">Item #1 ID:</span> 44492ce0-dfca-49f5-b519-0bf2839f2d64</div>\n            <div><span className=\"has-text-weight-bold\">Item #2 ID:</span> bc23cbd0-fc7a-404d-a473-39711a0f7c7c</div>\n            <div><span className=\"has-text-weight-bold\">Item #3 ID:</span> b79533d1-3b13-47e8-9efb-7c96bb9245c4</div>\n            <div><span className=\"has-text-weight-bold\">Item #4 ID:</span> c0b6efc9-ed65-448d-a06e-21a1ed4b48c8</div>\n          </Hero.Body>\n        </Hero>\n        </Section>\n\n        <Section>\n        <Heading>#1 - Create a customer account: POST request to /customers</Heading>\n        <div className=\"endpointSectionBody\">\n          <div className=\"endpointSectionBody-inputSide\">\n            \n            <div className=\"field\">\n              <label className=\"label\">Customer's first name</label>\n              <div className=\"control\">\n                <input type=\"text\" className={ \"input\" + this.highlightInputIfEmpty(\"section1\", \"firstName\") } value={this.state.section1.inputs.firstName} onChange={this.handleInputChange} name=\"firstName\" placeholder=\"John\"/>\n                <p className={\"help \"  + this.displayHelperMessageIfInputEmpty(\"section1\", \"firstName\")}>First name can't be empty</p>\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Customer's last name</label>\n              <div className=\"control\">\n                <input type=\"text\" className={ \"input\" + this.highlightInputIfEmpty(\"section1\", \"lastName\") } value={this.state.section1.inputs.lastName} onChange={this.handleInputChange} name=\"lastName\" placeholder=\"Doe\"/>\n                <p className={\"help \"  + this.displayHelperMessageIfInputEmpty(\"section1\", \"lastName\")}>Last name can't be empty</p>\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Customer's email</label>\n              <div className=\"control\">\n                <input type=\"email\" className={\"input \" + (this.state.section1.isEmailValid ? \" is-success\" : \" is-danger\") } value={this.state.section1.inputs.emailAddress} onChange={this.handleInputChange} name=\"emailAddress\" placeholder=\"john@doe.com\"/>\n                <p className={\"help \" + (this.state.section1.isEmailValid ? \" is-hidden\" : \" is-danger\")}>This email is invalid</p>\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Customer's address</label>\n              <div className=\"control\">\n                <input type=\"text\" className={ \"input\" + this.highlightInputIfEmpty(\"section1\", \"address\") } value={this.state.section1.inputs.address} onChange={this.handleInputChange} name=\"address\" placeholder=\"John doe street 23\"/>\n                <p className={\"help \"  + this.displayHelperMessageIfInputEmpty(\"section1\", \"address\")}>Address can't be empty</p>\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Customer's phone number</label>\n              <div className=\"control\">\n                <input type=\"text\" className={ \"input\" + this.highlightInputIfEmpty(\"section1\", \"phoneNumber\") } value={this.state.section1.inputs.phoneNumber} onChange={this.handleInputChange} name=\"phoneNumber\" placeholder=\"012345678\"/>\n                <p className={\"help \"  + this.displayHelperMessageIfInputEmpty(\"section1\", \"phoneNumber\")}>Phone number can't be empty</p>\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <div className=\"control\">\n                <button className=\"button is-primary\" onClick={this.createCustomer}>Create</button>\n              </div>\n            </div>\n\n          </div>\n          <Hero className=\"has-background-grey-lighter endpointSectionBody-descriptionSide\" id=\"initialDataHero\">\n            <Hero.Body className=\"is-size-5\">\n              <div><span className=\"has-text-weight-bold\">Requirements:</span> JSON payload in the body with the following fields and their required types:\n              <ul>\n                <li>firstName: String</li>\n                <li>lastName: String</li>\n                <li>emailAddress: String</li>\n                <li>address: String</li>\n                <li>phoneNumber: String</li>\n              </ul>\n              </div>\n              <br/>\n              <div><span className=\"has-text-weight-bold\">Expected Response:</span> JSON object of the newly created customer</div>\n            </Hero.Body>\n          </Hero>\n          \n        </div>\n        </Section>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}